* Item                       :drill:
  :PROPERTIES:
  :ID:       813df295-c599-45b5-a922-7015620b60c8
  :DRILL_LAST_INTERVAL: 0.0
  :DRILL_REPEATS_SINCE_FAIL: 1
  :DRILL_TOTAL_REPEATS: 1
  :DRILL_FAILURE_COUNT: 1
  :DRILL_AVERAGE_QUALITY: 1.0
  :DRILL_EASE: 2.5
  :DRILL_LAST_QUALITY: 1
  :DRILL_LAST_REVIEWED: [2017-05-14 Sun 11:09]
  :END:
Generic function in lisp

** Answer
Creates a structure of the "methods". The methods in classes provide the actual implementation.

#+BEGIN_SRC lisp
  (defgeneric draw (shape)
    (:documentation "draw the shape"))

  (defmethod draw ((shape circle))
    ...)

  (defmethod draw ((shape square))
    ...)
#+END_SRC

* Item                       :drill:
  :PROPERTIES:
  :ID:       9471bf0f-a781-4454-be0c-f9f2f418e890
  :END:
Where do methods belong? Classes or Generic Functions?

** Answer
Generic functions. A GF decides which of the methods to run based on the arguments.

* Item                       :drill:
  :PROPERTIES:
  :ID:       d9bd36ec-a1c3-414e-a8e4-1321131bf6a8
  :DRILL_LAST_INTERVAL: 0.0
  :DRILL_REPEATS_SINCE_FAIL: 1
  :DRILL_TOTAL_REPEATS: 1
  :DRILL_FAILURE_COUNT: 1
  :DRILL_AVERAGE_QUALITY: 0.0
  :DRILL_EASE: 2.5
  :DRILL_LAST_QUALITY: 0
  :DRILL_LAST_REVIEWED: [2017-05-14 Sun 11:07]
  :END:
What happens when more than one method can be called using the given arguments?

** Answer
These are combined to a single method and then executed.

* Item                                                                :drill:
  :PROPERTIES:
  :ID:       72522619-1211-4266-83fa-758bd4213793
  :END:
How to achieve parameter specialisation?

** Answer
Parameters of a method can be specialised by:
   - By giving a classname 
   - EQL specialiser, by providing a particular object
     

* Item                       :drill:
  :PROPERTIES:
  :ID:       7ba5aa82-f1ae-4b1c-9029-cb88781b5fb8
  :END:
What is standard method combination?

** Answer
The most specific method runs first, and then calls `call-next-method` which calls the next specific method, and this goes on until there are either no calls to `call-next-method` or we have reached the top of the heirarchy.

* Item                       :drill:
  :PROPERTIES:
  :ID:       5422281c-2959-4862-9583-c41e142fb62d
  :END:
What are auxillary methods?

** Answer
   - These are defined like the "primary" methods syntactically, with `:before`, `:after`, or `:around`. These run as the names suggest.
   - All the auxillary methods are run, not just the most specific ones.
   - These are independent pieces helping with DRY
   - No need to call `call-next-method`
   

* Item                       :drill:
  :PROPERTIES:
  :ID:       f26a2bdb-a7a9-45e7-abae-26886b753819
  :DRILL_LAST_INTERVAL: 0.0
  :DRILL_REPEATS_SINCE_FAIL: 1
  :DRILL_TOTAL_REPEATS: 1
  :DRILL_FAILURE_COUNT: 1
  :DRILL_AVERAGE_QUALITY: 2.0
  :DRILL_EASE: 2.5
  :DRILL_LAST_QUALITY: 2
  :DRILL_LAST_REVIEWED: [2017-05-14 Sun 11:07]
  :END:
What is the order of execution of auxillary methods?

** Answer
   - :before: most-specific-first order
     + Most specific runs so that less specific and primary can use the more specific functionalities.
   - :after: most-specific-last order
     + Each more specific :after so that each more specific will get a chance to clean up.

* Item                       :drill:
  :PROPERTIES:
  :ID:       31bb268a-2705-44a9-be7a-fe9750204aba
  :END:
Can we subclass the inbuilt classes (INTERGER, STRING, LIST, etc)?

** Answer
Nope. But these can be extended by creating a method which specialised over these.


* Item                       :drill:
  :PROPERTIES:
  :ID:       303f6ff9-3cfd-4414-bc74-5cb942b3e01f
  :END:
How does classes of Common Lisp differ from mainstream OO languages like C#, Java?

** Answer
The classes in CL only contain the state, with the behavior defined by generic functions and methods. In C#/Java, the class contain both the state and the behavior.

* Item                       :drill:
  :PROPERTIES:
  :ID:       1880c62e-6b8a-4237-9a02-9ae41985550e
  :END:
Class' namespace.

** Answer
Classes have a different namespace than functions and variable and therefore a class, a function, and a varible can have a same name.

* Item                       :drill:
  :PROPERTIES:
  :ID:       bfc6d94a-fec0-4aaf-b6f2-a65d53adcbba
  :DRILL_LAST_INTERVAL: 0.0
  :DRILL_REPEATS_SINCE_FAIL: 1
  :DRILL_TOTAL_REPEATS: 1
  :DRILL_FAILURE_COUNT: 1
  :DRILL_AVERAGE_QUALITY: 1.0
  :DRILL_EASE: 2.5
  :DRILL_LAST_QUALITY: 1
  :DRILL_LAST_REVIEWED: [2017-05-14 Sun 11:10]
  :END:
Simula's OOP

** Answer
A class contains the behaviour, and defines methods or member functions.

* Item                       :drill:
  :PROPERTIES:
  :ID:       aa565b92-eb01-4453-9f0b-efe890012d74
  :DRILL_LAST_INTERVAL: 0.0
  :DRILL_REPEATS_SINCE_FAIL: 1
  :DRILL_TOTAL_REPEATS: 1
  :DRILL_FAILURE_COUNT: 1
  :DRILL_AVERAGE_QUALITY: 1.0
  :DRILL_EASE: 2.5
  :DRILL_LAST_QUALITY: 1
  :DRILL_LAST_REVIEWED: [2017-05-14 Sun 11:09]
  :END:
Skeleton of a class definition

** Answer
The slots of a class is either a number of names, which can itself be a list of different arguments. `initarg` specifies the name of the argument, `initform` defins the initial value for the slot. The latter takes an expression and therefore can contain some lisp code to create dynamic values.

#+BEGIN_SRC lisp

  (defclass bank-account ()
    ((customer-name
      :initarg :name
      :initform (error "Please specify a name"))
     (balance
      :initarg :balance
      :initform 0)))

  ;; without :name, it will throw the error since initform
  ;; is evaluated once for every object (and for each slot)
  ;; which has it defined.

  (make-instance 'bank-account :name "MyName" :balance 120)

#+END_SRC

* Item                       :drill:
  :PROPERTIES:
  :ID:       c97d9943-e127-4b5c-bade-4b7caa33045f
  :DRILL_LAST_INTERVAL: 0.0
  :DRILL_REPEATS_SINCE_FAIL: 1
  :DRILL_TOTAL_REPEATS: 1
  :DRILL_FAILURE_COUNT: 1
  :DRILL_AVERAGE_QUALITY: 0.0
  :DRILL_EASE: 2.5
  :DRILL_LAST_QUALITY: 0
  :DRILL_LAST_REVIEWED: [2017-05-14 Sun 11:09]
  :END:
Do `initform` has access to the object being initialised?

** Answer
Nope. For this, create a method for `initialize-instance` `after` method, specialised for the given class. It will have access to the object, and will run once the object is created.

* Item                       :drill:
  :PROPERTIES:
  :ID:       99937dc0-3c9d-4df8-b9ae-f2175b9b6190
  :DRILL_LAST_INTERVAL: 0.0
  :DRILL_REPEATS_SINCE_FAIL: 1
  :DRILL_TOTAL_REPEATS: 1
  :DRILL_FAILURE_COUNT: 1
  :DRILL_AVERAGE_QUALITY: 0.0
  :DRILL_EASE: 2.5
  :DRILL_LAST_QUALITY: 0
  :DRILL_LAST_REVIEWED: [2017-05-14 Sun 11:04]
  :END:
How to create setf-able slots in classes? 

** Answer
Using setf functions (which defines a way to extend `setf`).

#+BEGIN_SRC lisp

  (defun (setf customer-name) (name account)
    (setf (slot-value account 'customer-name) name))

#+END_SRC

* Item                       :drill:
  :PROPERTIES:
  :ID:       73072468-0874-4a1b-b6f3-e9b5c5429542
  :DRILL_LAST_INTERVAL: 0.0
  :DRILL_REPEATS_SINCE_FAIL: 1
  :DRILL_TOTAL_REPEATS: 1
  :DRILL_FAILURE_COUNT: 1
  :DRILL_AVERAGE_QUALITY: 2.0
  :DRILL_EASE: 2.5
  :DRILL_LAST_QUALITY: 2
  :DRILL_LAST_REVIEWED: [2017-05-14 Sun 11:06]
  :END:
What is `:reader` in a `defclass`?

** Answer
Used to create a reader/accessor for the class

#+BEGIN_SRC lisp
  (defclass account ()
    (balance
     :initarg :balance
     :initform 0
     :reader balance))
#+END_SRC


* Item                       :drill:
  :PROPERTIES:
  :ID:       59782976-0221-43a1-951d-d0742fbc969f
  :DRILL_LAST_INTERVAL: 0.0
  :DRILL_REPEATS_SINCE_FAIL: 1
  :DRILL_TOTAL_REPEATS: 1
  :DRILL_FAILURE_COUNT: 1
  :DRILL_AVERAGE_QUALITY: 0.0
  :DRILL_EASE: 2.5
  :DRILL_LAST_QUALITY: 0
  :DRILL_LAST_REVIEWED: [2017-05-14 Sun 11:09]
  :END:
What is `:writer` in a `defclass`?

** Answer
Used to create a writer/accessor for the class

#+BEGIN_SRC lisp
  (defclass account ()
    (customer-name
     :initarg :customer-name
     :initform (error "Customer name cannot be empty")
     :reader customer-name
     :writer customer-name))
#+END_SRC


* Item                       :drill:
  :PROPERTIES:
  :ID:       bda89b96-a424-4ca8-a866-a8ba50bf668d
  :END:
What is `:accessor` in a `defclass`?

** Answer
Used to create a reader + writer for the class

#+BEGIN_SRC lisp
  (defclass account ()
    (customer-name
     :initarg :customer-name
     :initform (error "Customer name cannot be empty")
     :accessor customer-name))
#+END_SRC

* Item                       :drill:
  :PROPERTIES:
  :ID:       80b812bf-114b-444b-b9df-f933e127e934
  :DRILL_LAST_INTERVAL: 0.0
  :DRILL_REPEATS_SINCE_FAIL: 1
  :DRILL_TOTAL_REPEATS: 1
  :DRILL_FAILURE_COUNT: 1
  :DRILL_AVERAGE_QUALITY: 2.0
  :DRILL_EASE: 2.5
  :DRILL_LAST_QUALITY: 2
  :DRILL_LAST_REVIEWED: [2017-05-14 Sun 11:08]
  :END:
What is `with-slots` and `with-accessors`?

** Answer
In class, repeatedly calling other slots in a codeblock can become verbose. with-slots allows to access slots, with-accessors allow to access accessors, with the latter being higher level and not using the slots directly.

#+BEGIN_SRC lisp
  (defmethod assess-low-balance-penalty ((account bank-account))
    (with-slots (balance) account
      (when (< balance *minimum-balance*)
        (decf balance (* balance 0.01)))))


  (defmethod assess-low-balance-penalty ((account bank-account))
    (with-slots ((bal balance)) account
      (when (< bal *minimum-balance*)
        (decf bal (* bal 0.01)))))
#+END_SRC

